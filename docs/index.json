
[{"content":"Name: d4rkn19ht (not realname) Status: single Study at: VNUHCM - University of Information Technology Field: information security Main category: crypto/pwn (play crypto first, later change to pwn) Hobby: cats, play video games (LoL), ... Dream: traveling around the world Hi, I\u0026rsquo;m d4rkn19ht, from CoS team (Council of Sheep). I like learning new things, researching about game, explotation/hacking/malware, \u0026hellip; Kinda introvert type (dont like talking that much), hate giving up (even most of the time I end up loosing).\n","date":"6 November 2024","externalUrl":null,"permalink":"/about/","section":"D4rkn19ht","summary":"\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eName: d4rkn19ht (not realname)\nStatus: single\nStudy at: VNUHCM - University of Information Technology\nField: information security\nMain category: crypto/pwn (play crypto first, later change to pwn)\nHobby: cats, play video games (LoL), ...\nDream: traveling around the world\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eHi, I\u0026rsquo;m d4rkn19ht, from CoS team (Council of Sheep). I like learning new things, researching about game, explotation/hacking/malware, \u0026hellip; Kinda introvert type (dont like talking that much), hate giving up (even most of the time I end up loosing).\u003c/p\u003e","title":"About","type":"page"},{"content":"","date":"6 November 2024","externalUrl":null,"permalink":"/","section":"D4rkn19ht","summary":"","title":"D4rkn19ht","type":"page"},{"content":" 1.Insights # #!/usr/bin/env sage from Crypto.Util.number import * from flag import flag def getRandomNBits(n): nb = \u0026#39;1\u0026#39; + \u0026#39;\u0026#39;.join([str(randint(0, 1)) for _ in range(n - 1)]) return nb def getLeader(L, n): nb = L + getRandomNBits(n) return int(nb, 2) def genPrime(L, nbit): l = len(L) assert nbit \u0026gt;= l while True: p = getLeader(L, nbit - l) if is_prime(p): return p def genKey(L, nbit): p, q = [genPrime(L, nbit) for _ in \u0026#39;__\u0026#39;] n = p * q d = next_prime(pow(n, 0.2919)) phi = (p - 1) * (q - 1) e = inverse(d, phi) pubkey, privkey = (n, e), (p, q) return pubkey, privkey def encrypt(msg, pubkey): n, e = pubkey m = bytes_to_long(msg) c = pow(m, e, n) return c nbit = 1024 L = bin(bytes_to_long(b\u0026#39;Practical\u0026#39;))[2:] pubkey, privkey = genKey(L, nbit) p, q = privkey c = encrypt(flag, pubkey) print(\u0026#39;Information:\u0026#39;) print(\u0026#39;-\u0026#39; * 85) print(f\u0026#39;n = {p * q}\u0026#39;) print(f\u0026#39;e = {pubkey[1]}\u0026#39;) print(f\u0026#39;c = {c}\u0026#39;) print(f\u0026#39;p = {bin(p)[2:len(L)]}...[REDACTED]\u0026#39;) print(f\u0026#39;q = {bin(q)[2:len(L)]}...[REDACTED]\u0026#39;) print(\u0026#39;-\u0026#39; * 85) RSA challenge, d is know, so just find d and recover the flag\nn = 12765231982257032754070342601068819788671760506321816381988340379929052646067454855779362773785313297204165444163623633335057895252608396010414744222572161530653104640020689896882490979790275711854268113058363186249545193245142912930804650114934761299016468156185416083682476142929968501395899099376750415294540156026131156551291971922076435528869024742993840057342092865203064721826362149723366381892539617642364692012936270150691803063945919154346756726869466855557344213050973081755499746750276623648407677639812809665472258655462846021403503851719008687214848550916999977775070011121527941755954255781343103086789 e = 459650454686946706615371845737527916539205656667844780634386049268800615782964920944229084502752167395446158290854047696006034750210758341744841762479191173017773034647739346927390580848998121830029134542880713409306092967282675122699586503684943407535067216738556403169403622104762516293879994387324370835718056251706150557820106296417750402984941838652433642298378976899556042987560946508887315484380807248331504458640857234708123277403252632993828101306072382329879857946191508782246793011691530554606521701055094223574951862129713872918021549814674387049788995785872980320871421550616327471735316980754238323013 c = 10992248752412909788626396175372747713079469256270100576886987393986576680666320383209810005318254336440105142571546847427454822405793626080251363454531982746373841267986148332456716023293306870382809568309620264499225135226626560298741596462262513921032733814032790312163314776421380481083058518893602887082464123177575742160690315666730642727773288362853901330620841098230284739614618790097180848133698381487679399364400048499041582830157094876815030301231505774900176910650887780842536610942820066913075027528705150102760422836458745949063992228680293226303245265232017738712226154128654682937687199768621565945171 d = next_prime(pow(n, 0.2919)) from Crypto.Util.number import long_to_bytes as ltb print(ltb(pow(int(c),int(d),int(n)))) FLAG: CCTF{RSA_N3w_rEc0rd5_4Nd_nEw_!nSi9h75!}\n2.Suction # #!/usr/bin/env python3 from Crypto.Util.number import * from flag import flag def keygen(nbit, r): while True: p, q = [getPrime(nbit) for _ in \u0026#39;__\u0026#39;] e, n = getPrime(16), p * q phi = (p - 1) * (q - 1) if GCD(e, phi) == 1: N = bin(n)[2:-r] E = bin(e)[2:-r] PKEY = N + E pkey = (n, e) return PKEY, pkey def encrypt(msg, pkey, r): m = bytes_to_long(msg) n, e = pkey c = pow(m, e, n) C = bin(c)[2:-r] return C r, nbit = 8, 128 PKEY, pkey = keygen(nbit, r) print(f\u0026#39;PKEY = {int(PKEY, 2)}\u0026#39;) FLAG = flag.lstrip(b\u0026#39;CCTF{\u0026#39;).rstrip(b\u0026#39;}\u0026#39;) enc = encrypt(FLAG, pkey, r) print(f\u0026#39;enc = {int(enc, 2)}\u0026#39;) Base on the challenge, we do not know the last 8-bit of encrypted flag, n and e, so the simpliest way is to bruteforce all possible states, it will took 256^3 times to find the correct value. In here, I do a small optimization: I first find the n and e value, then if I found the right public key then I will start bruteforce encrypted flag. In the finding public key phase, if current n is divived by a small number (between range [2, 100000]), then remove it from possible n. As n only 256 bits long, so you just throw it in (factordb)[http://factordb.com/] and then it will do the rest. Finding e just the same, only chose the prime, remove number that is not prime from current list. Then the total of bruteforcing need is very small. Source:\nPKEY = 55208723145458976481271800608918815438075571763947979755496510859604544396672 ENC = 127194641882350916936065994389482700479720132804140137082316257506737630761 N = int(bin(PKEY)[2:][:-8], 2) E = int(bin(PKEY)[2:][-8:], 2) from Crypto.Util.number import isPrime possible_e = [] for i in range(0, (1\u0026lt;\u0026lt;8)): e = (E \u0026lt;\u0026lt; 8 ) | i if isPrime(e): possible_e.append(e) def small_lmao(n): for i in range(2, 100000): if n % i == 0: return False return True # possible_n = [] # for i in range(0, (1\u0026lt;\u0026lt;8)): # n = (int(N) \u0026lt;\u0026lt; int(8)) | int(i) # if small_lmao(n): # possible_n.append(n) # for i in possible_n: # print(i) p = 188473222069998143349386719941755726311 q = 292926085409388790329114797826820624883 n = p * q def printable(ok): for i in ok: if i \u0026gt; 127 : return False return True from Crypto.Util.number import long_to_bytes as ltb for i in range((1\u0026lt;\u0026lt;8)): enc = (int(ENC) \u0026lt;\u0026lt; int(8)) | i for e in possible_e: d = pow(e, -1, (p-1)*(q-1)) dec = ltb(pow(int(enc), int(d), int(n))) if printable(dec): print(dec) FLAG: CCTF{6oRYGy\u0026amp;Dc$G2ZS}\n3.Resuction # #!/usr/bin/env python3 from Crypto.Util.number import * from flag import flag from decimal import * def keygen(nbit, r): while True: p, q = [getPrime(nbit) for _ in \u0026#39;__\u0026#39;] d, n = getPrime(64), p * q phi = (p - 1) * (q - 1) if GCD(d, phi) == 1: e = inverse(d, phi) N = bin(n)[2:-r] E = bin(e)[2:-r] PKEY = N + E pkey = (n, e) return PKEY, pkey def encrypt(msg, pkey, r): m = bytes_to_long(msg) n, e = pkey c = pow(m, e, n) C = bin(c)[2:-r] return C r, nbit = 8, 1024 PKEY, pkey = keygen(nbit, r) print(f\u0026#39;PKEY = {int(PKEY, 2)}\u0026#39;) FLAG = flag.lstrip(b\u0026#39;CCTF{\u0026#39;).rstrip(b\u0026#39;}\u0026#39;) enc = encrypt(FLAG, pkey, r) print(f\u0026#39;enc = {int(enc, 2)}\u0026#39;) This challenge is similar to the above, with a little bit upgrade. This time, e are very big, but instead d are small (which if you play crypto, you probably know what attack I will use later). I do the same trick that I use in the previous challenge - only keep possible numbers that can be the public key, remove the other. In this attack, to recover d, I use the Wiener attack (this apply in the case that d is less than n^(1/4)) Source:\nPKEY = 14192646310719975031517528381795548241077678859071194396837281472399230674325587198691913743313024193030641258581477544395982020385534616950314446352119543012689979705497443206671093873748633162188213109347667494028713308821945628880987033909436936504594085029207071182583896573425433818693447573712242776054326253393149643818428222532313129014785625379928796322492111783102063504659053965652092334907431265629283336869752591405010801363428649651892548988084920295512198406822149854508798413366425646089176325412867633899847841343293434518769693835679828109184625256833518392375615524221729773443578746961887429674099018040291053535429314874943299587513900900515776980848746070077651676814430155460898107362207677739452859298842563030631706907437662807884529549746843462830493900480079096937402325307522965877069080418178692616875205678928420840955518031258855869218152431304423803589723140983606576549207164114711076498723237274262054605174412193097533550076687418481230734706280737017543741247718967059747548710091320650704988384742281590019869955579949961574733610565593105027342454880292474482792325237942870408329807427182014062811782475262070063065860763705715879581562335668163076088547827008755841277828137570366416095778 ENC = 93313196155732054514477836642637636744872135106456047659057794344503071105783322399713135615723000054324693644981340568454628360027598469597864407205974007198804288563284521413279406211756674451582156555173212403946908121125010635246043311803494356106191509999360722019559999844621905376368824621365540442906142224342650371557766313381899279520110833822291649001754956653102495882094754863493058001964760438040783400782352466943990226083197340594364084294954324101604417550048379969516185353765224920719355485680872367930581872987972421836853197205534334204586713387469939986387582911728909524428102693874671302382 N = int(bin(PKEY)[2:][:2048 - 8], 2) from Crypto.Util.number import isPrime # possible_e = [] # for i in range(0, (1\u0026lt;\u0026lt;8)): # e = (E \u0026lt;\u0026lt; 8 ) | i # if isPrime(e): # possible_e.append(e) def small_lmao(n): for i in range(2, 1000000): if n % i == 0: return False return True # possible_n = [] # for i in range(0, (1\u0026lt;\u0026lt;8)): # n = (int(N) \u0026lt;\u0026lt; int(8)) | int(i) # if small_lmao(n): # possible_n.append(n) # for i in possible_n: # print(i) def cf_expansion(a,b): ls = [] ls.append(a//b) a,b = b, a%b while(b!=0): ls.append(a // b) a , b = b, a%b return ls import math def cf_convergent(ls): n = [] d = [] for i in range(len(ls)): if (i == 0): n.append(ls[i]) d.append(1) elif i == 1: n.append(ls[1]*ls[0] + 1) d.append(ls[1]) else: n.append(n[i-1]*ls[i] + n[i-2]) d.append(d[i-1]*ls[i] + d[i-2]) yield n[i],d[i] def solve(B,P): delta = B*B - 4*P if (delta\u0026lt;0): return 0,0 rdel = math.isqrt(delta) return (B + rdel)//2, (B - rdel)//2 def find_d(n,e): for k,d in cf_convergent(cf_expansion(e,n)): if (k==0): continue phin = (e*d - 1)//k sum = n - phin + 1 p, q = solve(sum, n) if (p*q==n): return d return 0 E = int(bin(PKEY)[2:][2048 - 8 : ], 2) # for testn in possible_n: # for i in range(1\u0026lt;\u0026lt;8): # e = (int(E) \u0026lt;\u0026lt; 8) | int(i) # d = find_d(testn, e) # if d != 0 and isPrime(int(d)): # print(\u0026#34;Found pair: \u0026#34;) # print(f\u0026#34;n = {testn}\u0026#34;) # print(f\u0026#34;e = {e}\u0026#34;) # print(f\u0026#34;d = {d}\u0026#34;) n = 28781418259071163834545208786492597316357138268450456443121779857237190669654679502925616925907115061139426651454246296829614929839091896732956124186768298711851015827257060255218333952539548249210858753648965921585289379414151961197198777686222970660319202167442420274437451557166736926361972983650143650097981777542950972139757680517744639660898696901009088978971506526002932830312595664154921938706240176536981793499426543601513874115451315768319593051858239793153849410530285884330866972048864103208648273010126369559341912163849839663249252300813799486995834473605326584986843653735963725697383056972744506296271 e = 19152712448778858582528734875468196678366984818842265525346340114296810907435357813959451387293270496095878944786775775749129832803842508074794234774568097809721690831345120778762600713106116293626590641716601095020202233532544196547654794913903350183891867544539554967347396716482565232986995497267273877597593761608770699282404807896050347585632153075234094034163801474316224123620090879021107631960008144066862084573910442635526649884938724881478713853362879412453150893601267748827792136092224063120914443976032390554506925020506643629449426005820918745312311984391868895996772772355715765028825561022860823765675 d = 10254340117704573547 from Crypto.Util.number import long_to_bytes as ltb def printable(ok): for i in ok: if i \u0026gt; 127 : return False return True for i in range(1\u0026lt;\u0026lt;8): enc = (int(ENC) \u0026lt;\u0026lt; 8) | int(i) dec = ltb(pow(int(enc), int(d), int(n))) if printable(dec): print(dec) exit(0) FLAG: CCTF{aIr_pr3s5urE_d!Ff3rEn7i4L_8eTw3eN_ArEa5!}\n4.Blue office # #!/usr/bin/enc python3 import binascii from secret import seed, flag def gen_seed(s): i, j, k = 0, len(s), 0 while i \u0026lt; j: k = k + ord(s[i]) i += 1 i = 0 while i \u0026lt; j: if (i % 2) != 0: k = k - (ord(s[i]) * (j - i + 1)) else: k = k + (ord(s[i]) * (j - i + 1)) k = k % 2147483647 i += 1 k = (k * j) % 2147483647 return k def reseed(s): return s * 214013 + 2531011 def encrypt(s, msg): assert s \u0026lt;= 2**32 c, d = 0, s enc, l = b\u0026#39;\u0026#39;, len(msg) while c \u0026lt; l: d = reseed(d) enc += (msg[c] ^ ((d \u0026gt;\u0026gt; 16) \u0026amp; 0xff)).to_bytes(1, \u0026#39;big\u0026#39;) c += 1 return enc enc = encrypt(seed, flag) print(f\u0026#39;enc = {binascii.hexlify(enc)}\u0026#39;) An LCG base challenge, but in the reseed function, you may notice that it does not mod with something. Because of this, all we need to concern is the lower bits(or Least Significant Bits), as in this line msg[c] ^ ((d \u0026gt;\u0026gt; 16) \u0026amp; 0xff)), only lower bits are affect the result.\nSo my idea is, use the property above to bruteforce seed, then use that seed to calculate the flag Source:\nenc = bytes.fromhex(\u0026#34;b0cb631639f8a5ab20ff7385926383f89a71bbc4ed2d57142e05f39d434fce\u0026#34;) def reseed(s): return s * 214013 + 2531011 possible_seed = [] def check(seed): sample = [ord(\u0026#34;C\u0026#34;) ^ enc[0], ord(\u0026#34;C\u0026#34;) ^ enc[1], ord(\u0026#34;T\u0026#34;) ^ enc[2], ord(\u0026#34;F\u0026#34;) ^ enc[3], ord(\u0026#34;{\u0026#34;) ^ enc[4]][1:] okseed = ((ord(\u0026#34;C\u0026#34;) ^ enc[0]) \u0026lt;\u0026lt; 16) | seed for i in range(len(sample)): okseed = reseed(okseed) if ((okseed\u0026gt;\u0026gt;16) \u0026amp; 0xff) != sample[i]: return False return True possible_seed = [] for testseed in range(1\u0026lt;\u0026lt;16): if check(testseed) : possible_seed.append(testseed) print(possible_seed) okseed = ((ord(\u0026#34;C\u0026#34;) ^ enc[0]) \u0026lt;\u0026lt; 16) | possible_seed[0] flag = \u0026#34;C\u0026#34; for i in range(1, len(enc)): okseed = reseed(okseed) flag += chr(((okseed\u0026gt;\u0026gt;16) \u0026amp; 0xff) ^ enc[i]) print(flag) FLAG: CCTF{__B4ck_0r!F1c3__C1pHeR_!!}\n5.Roldy # #!/usr/bin/env python3 from Crypto.Util.number import * from pyope.ope import OPE as enc from pyope.ope import ValueRange import sys from secret import key, flag def die(*args): pr(*args) quit() def pr(*args): s = \u0026#34; \u0026#34;.join(map(str, args)) sys.stdout.write(s + \u0026#34;\\n\u0026#34;) sys.stdout.flush() def sc(): return sys.stdin.buffer.readline() def encrypt(msg, key, params): if len(msg) % 16 != 0: msg += (16 - len(msg) % 16) * b\u0026#39;*\u0026#39; p, k1, k2 = params msg = [msg[_*16:_*16 + 16] for _ in range(len(msg) // 16)] m = [bytes_to_long(_) for _ in msg] inra = ValueRange(0, 2**128) oura = ValueRange(k1 + 1, k2 * p + 1) _enc = enc(key, in_range = inra, out_range = oura) C = [_enc.encrypt(_) for _ in m] return C def main(): border = \u0026#34;|\u0026#34; pr(border*72) pr(border, \u0026#34; Welcome to Roldy combat, we implemented an encryption method to \u0026#34;, border) pr(border, \u0026#34; protect our secret. Please note that there is a flaw in our method \u0026#34;, border) pr(border, \u0026#34; Can you examine it and get the flag? \u0026#34;, border) pr(border*72) pr(border, \u0026#39;Generating parameters, please wait...\u0026#39;) p, k1, k2 = [getPrime(129)] + [getPrime(64) for _ in \u0026#39;__\u0026#39;] C = encrypt(flag, key, (p, k1, k2)) while True: pr(\u0026#34;| Options: \\n|\\t[E]ncrypted flag! \\n|\\t[T]ry encryption \\n|\\t[Q]uit\u0026#34;) ans = sc().decode().lower().strip() if ans == \u0026#39;e\u0026#39;: pr(border, f\u0026#39;encrypt(flag, key, params) = {C}\u0026#39;) elif ans == \u0026#39;t\u0026#39;: pr(border, \u0026#39;Please send your message to encrypt: \u0026#39;) msg = sc().rstrip(b\u0026#39;\\n\u0026#39;) if len(msg) \u0026gt; 64: pr(border, \u0026#39;Your message is too long! Sorry!!\u0026#39;) C = encrypt(msg, key, (p, k1, k2)) pr(border, f\u0026#39;C = {C}\u0026#39;) elif ans == \u0026#39;q\u0026#39;: die(border, \u0026#34;Quitting ...\u0026#34;) else: die(border, \u0026#34;Bye ...\u0026#34;) if __name__ == \u0026#39;__main__\u0026#39;: main() This time, we are facing an oracle challenge. The server give us 2 choice:\nGet the encrypted flag Encrypt an message So in the first glance, I notice that the server used the pyOPE cryptosystem. After searching, I know that pyOPE is an implementation of Boldyreva symmetric order-preserving encryption scheme. This scheme has an interesting property:\nif m1 \u0026lt; m2, then f(m1) \u0026lt; f(m2) Because of this, we can use binary search to searching for the correct flag. In my solution, you will notice that I reconnect to the server multiple times. This happened because server doesn\u0026rsquo;t allow to send mupltiple queries (I think it\u0026rsquo;s for keep the server away from crashing), but of course this doesn\u0026rsquo;t affect the solution much.\nSource:\nfrom pwn import * from Crypto.Util.number import long_to_bytes as ltb, bytes_to_long as btl s = remote(\u0026#34;02.cr.yp.toc.tf\u0026#34;, 31377) def establish(): global s s = remote(\u0026#34;02.cr.yp.toc.tf\u0026#34;, 31377) s.recvuntil(b\u0026#34;[Q]uit\\n\u0026#34;) s.sendline(b\u0026#34;e\u0026#34;) s.recvuntil(b\u0026#34; = \u0026#34;) enc = eval(s.recvline(0).decode()) return enc def encrypt(val): global s s.sendlineafter(b\u0026#34;[Q]uit\\n\u0026#34;, b\u0026#34;t\u0026#34;) s.sendlineafter(b\u0026#34;encrypt: \\n\u0026#34;, ltb(val)) s.recvuntil(b\u0026#34; = \u0026#34;) ok = eval(s.recvline(0).decode()) return ok[0] def bs(blockid): # [89370465111452328101028130174938390560, 90554308795198268800333083338000572447] flag = b\u0026#34;\u0026#34; s.close() for i in range(len(flag), 16): l = 0 r = 127 sleep(1) enc = establish() while l \u0026lt; r: testchar = ((l + r) // 2) + 1 print(f\u0026#34;chartest: {testchar}\u0026#34;) payload = flag + bytes([testchar]) + b\u0026#34;\\x00\u0026#34; * (16 - i - 1) ok = encrypt(btl(payload)) if ok \u0026lt;= enc[blockid]: l = testchar else: r = testchar - 1 flag += bytes([l]) print(f\u0026#34;Flag found: {flag}\u0026#34;) s.close() return flag flag = b\u0026#34;\u0026#34; flag += bs(0) flag += bs(1) flag += bs(2) flag += bs(3) print(flag) FLAG: CCTF{Boldyreva_5ymMe7rIC_0rD3r_pRe5Erv!n9_3nCryp7i0n!_LStfig9TM}\n","date":"6 November 2024","externalUrl":null,"permalink":"/posts/ctf/cryptoctf2023/cryptoctf2023/","section":"Posts","summary":"\u003ch2 class=\"relative group\"\u003e1.Insights \n    \u003cdiv id=\"1insights\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#1insights\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"ch\"\u003e#!/usr/bin/env sage\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003efrom\u003c/span\u003e \u003cspan class=\"nn\"\u003eCrypto.Util.number\u003c/span\u003e \u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003efrom\u003c/span\u003e \u003cspan class=\"nn\"\u003eflag\u003c/span\u003e \u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"n\"\u003eflag\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003egetRandomNBits\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"n\"\u003enb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;1\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e([\u003c/span\u003e\u003cspan class=\"nb\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erandint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003e_\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"nb\"\u003erange\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)])\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003enb\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003egetLeader\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eL\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"n\"\u003enb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eL\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003egetRandomNBits\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003egenPrime\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eL\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enbit\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"n\"\u003el\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eL\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003eassert\u003c/span\u003e \u003cspan class=\"n\"\u003enbit\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"kc\"\u003eTrue\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"n\"\u003ep\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egetLeader\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eL\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enbit\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eis_prime\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003egenKey\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eL\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enbit\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eq\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003egenPrime\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eL\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enbit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003e_\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;__\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003eq\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"n\"\u003ed\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enext_prime\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003epow\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e0.2919\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"n\"\u003ephi\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eq\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"n\"\u003ee\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003einverse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ephi\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"n\"\u003epubkey\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eprivkey\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003epubkey\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eprivkey\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eencrypt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emsg\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epubkey\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003epubkey\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"n\"\u003em\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ebytes_to_long\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emsg\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003epow\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003enbit\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1024\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eL\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003ebin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebytes_to_long\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003eb\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Practical\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e))[\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e:]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003epubkey\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eprivkey\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egenKey\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eL\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enbit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eq\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eprivkey\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eencrypt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eflag\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epubkey\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Information:\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;-\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e85\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003ef\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;n = \u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003ef\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;e = \u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003epubkey\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003ef\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;c = \u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003ef\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;p = \u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"nb\"\u003ebin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e)[\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"nb\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eL\u003c/span\u003e\u003cspan class=\"p\"\u003e)]\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s1\"\u003e...[REDACTED]\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003ef\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;q = \u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"nb\"\u003ebin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e)[\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"nb\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eL\u003c/span\u003e\u003cspan class=\"p\"\u003e)]\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s1\"\u003e...[REDACTED]\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;-\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e85\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eRSA challenge, d is know, so just find d and recover the flag\u003c/p\u003e","title":"CryptoCTF 2023 Writeup","type":"posts"},{"content":"","date":"6 November 2024","externalUrl":null,"permalink":"/tags/cryptography/","section":"Tags","summary":"","title":"Cryptography","type":"tags"},{"content":"","date":"6 November 2024","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"6 November 2024","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"6 November 2024","externalUrl":null,"permalink":"/tags/writeup/","section":"Tags","summary":"","title":"Writeup","type":"tags"},{"content":"","date":"6 November 2024","externalUrl":null,"permalink":"/posts/gamehack/","section":"Posts","summary":"","title":"Game hacking","type":"posts"},{"content":"","date":"6 November 2024","externalUrl":null,"permalink":"/posts/ctf/","section":"Posts","summary":"","title":"CTF writeup","type":"posts"},{"content":"","date":"6 November 2024","externalUrl":null,"permalink":"/posts/malware-section/","section":"Posts","summary":"","title":"Malware Section","type":"posts"},{"content":"","date":"6 November 2024","externalUrl":null,"permalink":"/tags/arch/","section":"Tags","summary":"","title":"Arch","type":"tags"},{"content":" 1. Why Arch # On a beautiful day, a programmer was fiddling with Windows theme configurations, trying to make his computer \u0026ldquo;cooler than ever.\u0026rdquo; But, alas, the more he customized, the messier it became; from colors to icons, everything started to feel more \u0026ldquo;outdated\u0026rdquo; than modern. While he was holding his head in frustration due to unresolvable bugs, the universe decided to \u0026ldquo;throw\u0026rdquo; an Arch Linux distro at him, as if saying, \u0026ldquo;Try this, my child.\u0026rdquo;\nAt first, the programmer felt overwhelmed with the chaos in front of him. But after a short time of \u0026ldquo;struggling,\u0026rdquo; he discovered the truth: \u0026ldquo;Simplicity is the ultimate sophistication.\u0026rdquo; Instead of trying to beautify his setup with complex themes, he could now customize a powerful operating system according to his desires, without worrying about unnecessary troubles.\nThat’s the beginning of my story of moving to Arch (though that’s not really how it happened :)))\nSo why Arch instead of Ubuntu or any other Linux distro? Here are the reasons:\nFirst, Arch follows the KISS principle (Keep It Simple Stupid), focusing on minimalism and keeping everything as simple as possible. Arch provides a basic setup, and from there, users configure settings to their liking. Arch is more suitable for users with long-term Linux experience who want to customize everything precisely. Arch Linux uses a rolling release model, meaning updates are done continuously without the need for major upgrades. This can lead to a more up-to-date system but requires users to be cautious with updates and comfortable with handling potential issues from ongoing updates. Arch Linux uses pacman as its package manager, known for its speed and simplicity. It also has the Arch User Repository (AUR), which contains thousands of community-maintained packages not available in the official repository. This allows users to easily install almost any software but requires some knowledge of building packages from source and security checks. My friend installed Arch, so I learned to install it too :)))) (I have no prejudice against other OSes, I still use WSL daily; it’s just that Arch offers more things to learn.)\nThose are the reasons why I think Arch is better than other Linux distros. Of course, for those who are lazy and don’t like diving deep into customization, Ubuntu is enough. However, the trade-off is losing control over your desired settings, and it takes up quite a bit of space. One of the things I love about Arch is its customization capability. If you search for \u0026ldquo;unixporn,\u0026rdquo; a well-known Reddit community focused on customization, you’ll find thousands of visually pleasing interfaces. Additionally, installing packages on Arch is much simpler than on Ubuntu… Enough talking about its greatness, let’s start with a guide on how to install Arch. This guide will be quite long and targeted at those who have little to no experience in installing Arch, so feel free to skip sections if you’re already familiar.\nHere is an overview of the guide sections:\nBasic Knowledge The computer boot-up process Boot modes: UEFI vs. BIOS File systems Partitioning Mounting Package manager Preparation Installing Arch 2. Installation # 2.1 Basic Knowledge # 2.1.1 Computer Boot-Up Process # The diagram below shows the OS boot-up process for a computer:\nThe image includes some redundant parts we don’t need to focus on. Here, we’ll only pay attention to step 4 in the diagram; steps 5 onward are automatically handled by the kernel (they only fail if there’s a configuration error or an issue with the kernel image, etc.). Below, I’ll briefly explain each step:\nStep 1 - Power On: This is the process that occurs right after pressing the power button to start the computer, during which the BIOS/UEFI initiates and performs pre-boot routines before loading the bootloader. Step 2 - BIOS/UEFI startup: This is the stage where BIOS/UEFI (firmware stored in ROM) performs tasks like hardware checks (Power On Self Test - POST procedure) and loading data from non-volatile memory (such as boot entries\u0026hellip;). Step 3 - Detect Devices: At this point, the POST process checks hardware like RAM and hard drives, or detects boot entries from boot devices (such as hard drives, CDs, USB drives…). After checking, control is handed over to choose the boot device. Step 4 - Choose a Boot Device: Choosing a boot device, as a computer can run multiple operating systems and can boot from memory devices to install an OS. Step 5 - Run bootloader: Running the bootloader stored in the boot entry on the drive; the bootloader’s job is to load the operating system (or, more precisely, the kernel image) based on saved configurations in the boot entry → The operating system loads into memory with arguments set according to the configuration file. At this point, the remaining tasks are handed over to the OS, and we don’t need to do much (if an error occurs during this process, it’s likely due to an issue with the kernel image). I’ve only briefly mentioned the tasks in each step. Next, I’ll explain the definitions and functions of each component in the diagram.\n2.1.2 Boot Modes: BIOS vs UEFI # For an OS to load into memory, a boot program is essential. This is where BIOS/UEFI comes in. I think most of you who have tinkered with the BIOS menu at startup already understand this to some extent. BIOS stands for \u0026ldquo;Basic Input/Output System.\u0026rdquo; Essentially, BIOS is a set of instructions stored on a firmware chip located on the computer’s motherboard.\nThe function of BIOS has been mentioned above (hardware check, running bootloader). Replacing the outdated BIOS firmware is UEFI (Unified Extensible Firmware Interface). UEFI is an improved and upgraded version of BIOS and has almost completely replaced BIOS on computers in recent years. The reason is that BIOS limitations have hampered some newer hardware.\nOne thing to emphasize is that, even though BIOS/UEFI is the first component to run, it is NOT an OS or anything close to an OS. Since it’s stored in ROM (to avoid potential damage and ensure smooth booting), BIOS/UEFI is much smaller than a kernel image. You can find more information on BIOS or UEFI here.\n2.1.3 Partitioning # Have you ever wondered why, with only one hard drive, your computer has two drive regions (C:\\ and D:)? This is due to partitioning. Partitioning is dividing the hard drive into separate, independent regions. Doing so creates multiple partitions, each independent of the other, so writing on one partition won’t affect the others. Additionally, certain partitions are essential to support the OS boot process.\nFor a computer to understand the disk partitions and each partition on the drive, it needs to read the partition table. This table is stored at the beginning of the hard drive. During startup, BIOS/UEFI reads the bytes at the drive’s beginning, containing information about the partition table, partitioning scheme, partitions on the drive, and how they are organized.\nIn terms of partitioning schemes, there are currently two main types in use:\nMBR (Master Boot Record): An older scheme used by BIOS. MBR supports up to four primary partitions or three primary partitions and one extended partition containing multiple logical partitions (I’ll explain logical and extended partitions later). GPT (GUID Partition Table): A new partition standard used by UEFI. GPT has no partition limit like MBR, supporting up to 2TB per partition and up to 128 partitions on Windows, or more on other OSes. This will be important later as we’ll use GPT for partitioning instead of MBR. On a side note:\nPrimary partition: Primary partitions store data or are used to boot, containing OS data. Extended partition: This is a special partition because it doesn’t directly store data but holds logical partitions, which are similar to folders. Logical partition: A sub-partition of an extended partition, functioning just like a primary partition. Logical partitions exist to bypass the primary partition limit in the MBR scheme (4 primary partitions). Other terms you may encounter include:\nESP (EFI System Partition): A separate partition for storing bootloaders or kernel images to assist with booting; only UEFI uses it, not BIOS. SWAP partition: This partition can be thought of as extended RAM. When the RAM is full, the OS moves some data from RAM to this partition to free up space. When needed, data is swapped back from this partition to RAM. 2.1.4 File System # A file system is a way to manage and organize the storing of data and folders. A file system is crucial; without it, the computer wouldn’t know where one file ends (obviously, not at a null byte), which folder stores which files, or how the structure is arranged. Some common file systems include (marked with * indicates those used in Arch installation):\nNTFS (New Technology File System): A new file system standard for Windows, replacing the older FAT standard, with improvements in metadata, performance, security access control, etc. Since this belongs to Windows, we won’t go into depth. FAT (File Allocation Table): An old file system designed for smaller disks or simpler folder structures. FAT is still in use today, known for its simplicity and high compatibility. However, due to its limitations, using FAT for data storage on a drive isn’t recommended. During the Arch installation, we’ll use FAT for the ESP partition. Ext4: Simply put, this is the main file system for data storage on Linux, similar to NTFS for Windows. Ext4 offers features like compatibility, extents, and large file size support. SWAP: This is the file system for the SWAP partition. 2.1.5 Mounting # When mentioning file systems and partitions, another term we need to cover is \u0026ldquo;mounting.\u0026rdquo; So what is mounting? Simply put, mounting makes a partition accessible. Why is this necessary? When booting, the OS has no information about the drive or its partitions and file systems. Therefore, to store and access data on the drive, mounting is required.\n2.1.6 Package Manager # Here’s ChatGPT’s explanation of a package manager:\nA package manager is a software tool that automates the process of installing, upgrading, configuring, and removing computer programs for a computer\u0026rsquo;s operating system in a consistent manner. It is a critical component in software management, simplifying the process of maintaining computers and software applications.\nA package manager handles installing, updating, or removing packages. If you’re on Windows, you download an installer from the web to install an application. In Arch, this is automated with the “pacman” command (or “apt” for Ubuntu).\nThis is an overview of the knowledge needed to install Arch. If you prefer a manual installation and already know the basics, you can skip this section. However, I think it will help you better understand and troubleshoot boot issues.\n2.2 Preparation # A USB drive Arch ISO file Computer Ethernet connection (for installation), or Wi-Fi or anything else, as long as it can connect to the internet (ping arch.org). 2.3 Installing Arch # This guide is based on an article about installing Arch on Hyper-V. Although it’s for a virtual machine, I think many parts are similar to installing on a physical machine. You can find the article here.\nArch ISO file: Download directly from archlinux.org/download, using a torrent or wget magnet link. Burn ISO file to USB: This doesn’t need further explanation, and I’m too lazy to write a guide. If you’re unfamiliar with this process, check this link here for reference. Adjust boot order: Before installation, adjust the boot order to place the USB boot first. To do this, open the BIOS menu and set the USB as the first boot device: Another important note: Arch does not support secure boot, so disable it in the security settings.\nWhen restarting and reaching this screen, select the Arch Linux install medium. Once booted, you’ll access a shell that looks like this:\nFirst, partition the hard drive as follows:\nAccording to the original article, the author suggested using fdisk to partition, but I recommend against it since fdisk uses the MBR scheme. Instead, use gdisk to partition. Device files are typically located in the /dev folder, and if there’s only one hard drive (SSD), the filename representing the drive will be /dev/sda (for HDDs, it’s /dev/hda). Enter gdisk \u0026lt;device filename\u0026gt; to start partitioning; after entering, you’ll see something like this: Follow the steps to partition the disk (here, I’m creating three different partitions: ESP, SWAP, and root partition, with partitions /dev/sda1, /dev/sda2, and /dev/sda3. ESP will be around 512MB, SWAP about 4GB, and the root partition will use the remaining space). root@archiso ~ # gdisk /dev/sda GPT fdisk (gdisk) version 1.0.9.1 Partition table scan: MBR: not present BSD: not present APM: not present GPT: not present Creating new GPT entries in memory. Command (? for help): n Partition number (1-128, default 1): ↵ First sector (34-41943006, default = 2048) or {+-}size{KMGTP}: ↵ Last sector (2048-41943006, default = 41940991) or {+-}size{KMGTP}: +512M Current type is 8300 (Linux filesystem) Hex code or GUID (L to show codes, Enter = 8300): ↵ Changed type of partition to \u0026#39;Linux filesystem\u0026#39; Command (? for help): n Partition number (2-128, default 2): ↵ First sector (34-41943006, default = 1050624) or {+-}size{KMGTP}: ↵ Last sector (1050624-41943006, default = 41940991) or {+-}size{KMGTP}: +4G Current type is 8300 (Linux filesystem) Hex code or GUID (L to show codes, Enter = 8300): ↵ Changed type of partition to \u0026#39;Linux filesystem\u0026#39; Command (? for help): n Partition number (3-128, default 3): ↵ First sector (34-41943006, default = 9439232) or {+-}size{KMGTP}: ↵ Last sector (9439232-41943006, default = 41940991) or {+-}size{KMGTP}: ↵ Current type is 8300 (Linux filesystem) Hex code or GUID (L to show codes, Enter = 8300): ↵ Changed type of partition to \u0026#39;Linux filesystem\u0026#39; Command (? for help): w Final checks complete. About to write GPT data. THIS WILL OVERWRITE EXISTING PARTITIONS!! Do you want to proceed? (Y/N): y OK; writing new GUID partition table (GPT) to /dev/sda. The operation has completed successfully. Once completed, you need to format each partition\u0026rsquo;s file system individually. As mentioned above, /dev/sda1 (ESP) will be formatted as FAT, /dev/sda2 as swap, and /dev/sda3 as ext4. I’ll format ESP as FAT32 since FAT supports backward compatibility.\nroot@archiso ~ # mkfs.fat -F 32 /dev/sda1 mkfs.fat 4.2 (2021-01-31) root@archiso ~ # mkswap /dev/sda2 Setting up swapspace version 1, size = 4 GiB (4294963200 bytes) no label, UUID=373190da-e759-46ab-bc2f-3a5f87d3b159 root@archiso ~ # swapon /dev/sda2 root@archiso ~ # mkfs.ext4 /dev/sda3 mke2fs 1.47.0 (5-Feb-2023) Discarding device blocks: done Creating filesystem with 4062720 4k blocks and 1015808 inodes Filesystem UUID: d49e04ef-1353-497d-8458-a4d784969e88 Superblock backups stored on blocks: 32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208 Allocating group tables: done Writing inode tables: done Creating journal (16384 blocks): done Writing superblocks and filesystem accounting information: done Now the partitioning is complete, so the next step is mounting them to access each partition for installation:\nroot@archiso ~ # mount /dev/sda3 /mnt root@archiso ~ # mkdir /mnt/boot root@archiso ~ # mount /dev/sda1 /mnt/boot root@archiso ~ # Here, I have mounted /dev/sda3 (root partition) to the /mnt directory and /dev/sda1 (ESP) to /mnt/boot. The /mnt/boot directory will store the kernel image and necessary components for booting.\nNext, we’ll install the core components of Arch OS. This installation can be done using pacstrap—similar to pacman, but used for installing into a specific folder. Required packages include: base linux linux-firmware dhcpcd openssh neovim.\nroot@archiso ~ # pacstrap /mnt base linux linux-firmware dhcpcd openssh neovim The installation process might take some time, so feel free to grab a snack or some tea while waiting (though it’s actually pretty quick, about 1-2 minutes).\n==\u0026gt; WARNING: Possibly missing firmware for module: \u0026#39;qla1280\u0026#39; ==\u0026gt; WARNING: Possibly missing firmware for module: \u0026#39;wd719x\u0026#39; -\u0026gt; Running build hook: [filesystems] -\u0026gt; Running build hook: [fsck] zstd: error 70 : Write error : cannot write block : No space left on device ==\u0026gt; Generating module dependencies cp: error writing \u0026#39;/tmp/mkinitcpio.2XehQT/root/lib/modules/6.7.4-arch1-1/modules.builtin\u0026#39;: No space left on device cp: error writing \u0026#39;/tmp/mkinitcpio.2XehQT/root/lib/modules/6.7.4-arch1-1/modules.builtin.modinfo\u0026#39;: No space left on device cp: error writing \u0026#39;/tmp/mkinitcpio.2XehQT/root/lib/modules/6.7.4-arch1-1/modules.order\u0026#39;: No space left on device depmod: ERROR: Could not create index \u0026#39;modules.dep\u0026#39;. Output is truncated: No space left on device ==\u0026gt; Creating zstd-compressed initcpio image: \u0026#39;/boot/initramfs-linux-fallback.img\u0026#39; ==\u0026gt; WARNING: errors were encountered during the build. The image may not be complete. error: command failed to execute correctly (13/13) Reloading system bus configuration... Skipped: Running in chroot. pacstrap /mnt base linux linux-firmware dhcpcd openssh neovim 31.20s user 24.81s system 44% cpu 2:07.24 total root@archiso ~ # Next, generate a file system table for each partition. When the system boots, it will look for a /mnt/etc/fstab file and mount partitions based on this information. Therefore, we’ll use genfstab to generate and save the fs table to the root partition.\nroot@archiso ~ # genfstab -U /mnt \u0026gt;\u0026gt; /mnt/etc/fstab root@archiso ~ # cat /mnt/etc/fstab # Static information about the filesystems. # See fstab(5) for details. # \u0026lt;file system\u0026gt; \u0026lt;dir\u0026gt; \u0026lt;type\u0026gt; \u0026lt;options\u0026gt; \u0026lt;dump\u0026gt; \u0026lt;pass\u0026gt; # /dev/sda3 UUID=d49e04ef-1353-497d-8458-a4d784969e88 / ext4 rw,relatime 0 1 # /dev/sda1 UUID=0A43-B4DE /boot vfat rw,relatime,fmask=0022,dmask=0022,codepage=437,iocharset=ascii,shortname=mixed,utf8,errors=remount-ro 0 2 # /dev/sda2 UUID=373190da-e759-46ab-bc2f-3a5f87d3b159 none swap defaults 0 0 root@archiso ~ # Now, I’ll switch to the root to set up a few configurations:\nroot@archiso ~ # arch-chroot /mnt Setting local timezone: [root@archiso /]# ln -sf /usr/share/zoneinfo/Asia/Ho_Chi_Minh /etc/localtime [root@archiso /]# date Sat Feb 17 02:28:10 +07 2024 Run locale-gen; first, open /etc/locale.gen and uncomment the line en_US.UTF-8 UTF-8 [root@archiso /]# nvim /etc/locale.gen [root@archiso /]# locale-gen Generating locales... en_US.UTF-8... done Generation complete. [root@archiso /]# Create /etc/locale.conf and set the LANG [root@archiso /]# nvim /etc/locale.conf LANG=en_US.UTF-8 Setup keyboard map: [root@archiso /]# nvim /etc/vconsole.conf KEYMAP=us Setup hostname và hosts [root@archiso /]# nvim /etc/hostname 4rk-zer0 [root@archiso /]# nvim /etc/hosts 127.0.0.1\tlocalhost ::1\tlocalhost Enable some services like DHCP and SSH: [root@archiso /]# systemctl enable dhcpcd.service Created symlink /etc/systemd/system/multi-user.target.wants/dhcpcd.service → /usr/lib/systemd/system/dhcpcd.service. [root@archiso /]# systemctl enable sshd.service Created symlink /etc/systemd/system/multi-user.target.wants/sshd.service → /usr/lib/systemd/system/sshd.service. [root@archiso /]# The final step is to set up the bootloader. A quick note: the Linux kernel has a configuration called CONFIG_EFI_STUB, which allows the kernel to boot directly from EFI (or UEFI) without needing a bootloader. I’ll cover bootloader installation in a separate section later. For now, let’s proceed with the setup.\nExit the current chroot environment by pressing Ctrl + D. Find the UUID of the root partition using the blkid command: root@archiso ~ # blkid /dev/sda3 /dev/sda3: UUID=\u0026#34;d49e04ef-1353-497d-8458-a4d784969e88\u0026#34; BLOCK_SIZE=\u0026#34;4096\u0026#34; TYPE=\u0026#34;ext4\u0026#34; PARTLABEL=\u0026#34;Linux filesystem\u0026#34; PARTUUID=\u0026#34;84a09143-1874-4a04-82b7-fa9ef3d12b4b\u0026#34; root@archiso ~ # Create a boot entry using efibootmgr, replacing the PARTUUID in the command with the PARTUUID of the root partition: root@archiso ~ # efibootmgr --disk /dev/sda --part 1 --create --label \u0026#34;Linux Kernel\u0026#34; --loader /vmlinuz-linux --verbose - -unicode \u0026#39;root=PARTUUID=84a09143-1874-4a04-82b7-fa9ef3d12b4b rw initrd=\\initramfs-linux.img\u0026#39; BootCurrent: 0002 Timeout: 0 seconds BootOrder: 0003,0002,0000,0001 Boot0000* EFI Network AcpiEx(VMBus,,)/VenHw(9b17e5a2-0891-42dd-b653-80b5c22809ba,635161f83edfc546913ff2d2f965ed0e36a4db2a250997498f05925300e1f7c6)/MAC(000000000000,0)/IPv4(0.0.0.00.0.0.0,0,0) dp: 02 02 18 00 00 00 00 00 00 00 00 00 00 00 00 00 56 4d 42 75 73 00 00 00 / 01 04 34 00 a2 e5 17 9b 91 08 dd 42 b6 53 80 b5 c2 28 09 ba 63 51 61 f8 3e df c5 46 91 3f f2 d2 f9 65 ed 0e 36 a4 db 2a 25 09 97 49 8f 05 92 53 00 e1 f7 c6 / 03 0b 25 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 / 03 0c 1b 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 / 7f ff 04 00 Boot0001* EFI SCSI Device AcpiEx(VMBus,,)/VenHw(9b17e5a2-0891-42dd-b653-80b5c22809ba,d96361baa104294db60572e2ffb1dc7f60966f49d23c65408ca66f4766cadb78)/SCSI(0,0) dp: 02 02 18 00 00 00 00 00 00 00 00 00 00 00 00 00 56 4d 42 75 73 00 00 00 / 01 04 34 00 a2 e5 17 9b 91 08 dd 42 b6 53 80 b5 c2 28 09 ba d9 63 61 ba a1 04 29 4d b6 05 72 e2 ff b1 dc 7f 60 96 6f 49 d2 3c 65 40 8c a6 6f 47 66 ca db 78 / 03 02 08 00 00 00 00 00 / 7f ff 04 00 Boot0002* EFI SCSI Device AcpiEx(VMBus,,)/VenHw(9b17e5a2-0891-42dd-b653-80b5c22809ba,d96361baa104294db60572e2ffb1dc7f60966f49d23c65408ca66f4766cadb78)/SCSI(0,1) dp: 02 02 18 00 00 00 00 00 00 00 00 00 00 00 00 00 56 4d 42 75 73 00 00 00 / 01 04 34 00 a2 e5 17 9b 91 08 dd 42 b6 53 80 b5 c2 28 09 ba d9 63 61 ba a1 04 29 4d b6 05 72 e2 ff b1 dc 7f 60 96 6f 49 d2 3c 65 40 8c a6 6f 47 66 ca db 78 / 03 02 08 00 00 00 01 00 / 7f ff 04 00 Boot0003* Linux Kernel HD(1,GPT,69b4003a-1656-4d4d-8f53-5024facf44d5,0x800,0x100000)/File(\\vmlinuz-linux)root=PARTUUID=84a09143-1874-4a04-82b7-fa9ef3d12b4b rw initrd=\\initramfs-linux.img dp: 04 01 2a 00 01 00 00 00 00 08 00 00 00 00 00 00 00 00 10 00 00 00 00 00 3a 00 b4 69 56 16 4d 4d 8f 53 50 24 fa cf 44 d5 02 02 / 04 04 22 00 5c 00 76 00 6d 00 6c 00 69 00 6e 00 75 00 7a 00 2d 00 6c 00 69 00 6e 00 75 00 78 00 00 00 / 7f ff 04 00 data: 72 00 6f 00 6f 00 74 00 3d 00 50 00 41 00 52 00 54 00 55 00 55 00 49 00 44 00 3d 00 38 00 34 00 61 00 30 00 39 00 31 00 34 00 33 00 2d 00 31 00 38 00 37 00 34 00 2d 00 34 00 61 00 30 00 34 00 2d 00 38 00 32 00 62 00 37 00 2d 00 66 00 61 00 39 00 65 00 66 00 33 00 64 00 31 00 32 00 62 00 34 00 62 00 20 00 72 00 77 00 20 00 69 00 6e 00 69 00 74 00 72 00 64 00 3d 00 5c 00 69 00 6e 00 69 00 74 00 72 00 61 00 6d 00 66 00 73 00 2d 00 6c 00 69 00 6e 00 75 00 78 00 2e 00 69 00 6d 00 67 00 root@archiso ~ # Check if the boot entry exists: Basically, we\u0026rsquo;re almost done here, but there’s one more task left: creating a user.\nroot@archiso ~ # arch-chroot /mnt [root@archiso /]# pacman -Syu sudo [root@archiso /]# useradd -m d4rkn19ht [root@archiso /]# usermod -aG wheel d4rkn19ht [root@archiso /]# passwd d4rkn19ht New password: Retype new password: passwd: password updated successfully [root@archiso /]# Change the super user permissions in the sudo command by uncommenting the line wheel ALL=(ALL) ALL.\n# EDITOR=nvim visudo ... %wheel ALL=(ALL) ALL Press Ctrl + D to exit the chroot environment, then power off, adjust the boot order, and reboot the computer. If the screen appears as shown below upon reboot, it means the setup was successful.\nSome notes:\nIf there are boot issues (fstab error, etc.), you can reinsert the USB boot drive and use the shell to fix any necessary settings. Remember to mount before making changes. Typically, if there\u0026rsquo;s an error, it’s likely due to an fstab issue or a boot entry problem. In this case, don\u0026rsquo;t rush to reinstall everything from scratch; simply recreate the fstab and generate a new boot entry (make sure to delete the old one). Installing Arch is fast, but it doesn’t include a GUI by default. I’ll write a separate post about setting up a GUI. That concludes this guide. See you in another post :P\n","date":"6 November 2024","externalUrl":null,"permalink":"/posts/arch-install/","section":"Posts","summary":"\u003ch2 class=\"relative group\"\u003e1. Why Arch \n    \u003cdiv id=\"1-why-arch\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#1-why-arch\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003eOn a beautiful day, a programmer was fiddling with Windows theme configurations, trying to make his computer \u0026ldquo;cooler than ever.\u0026rdquo; But, alas, the more he customized, the messier it became; from colors to icons, everything started to feel more \u0026ldquo;outdated\u0026rdquo; than modern. While he was holding his head in frustration due to unresolvable bugs, the universe decided to \u0026ldquo;throw\u0026rdquo; an Arch Linux distro at him, as if saying, \u0026ldquo;Try this, my child.\u0026rdquo;\u003c/p\u003e","title":"How to install Arch OS","type":"posts"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]